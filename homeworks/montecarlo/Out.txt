----------------------------------------------------
--------------------Part A--------------------------
For part a, I had to implement a plain montecarlo integrator. I test it on some integrals:

First the integral of f(x,y) = x on x going from 0 to 3 and b going from 0 to 3. This should half the volume of V, that is 3*3*3/2 = 13.5:
Obtained result:13.50087961613		Estimated error: 0.00779239228183469		with N = 1000000.
I ran the computation with different values of N, and found that the error was generally underestimated, until I reached very large N.

A simple spherical integral, the function f(r, theta, phi) = 16z = 16r*cos(theta) in the upper half sphere with radius one.
That means I must evaluate along (0,1) for r, (0, pi/2) for theta and (0, 2pi) for phi, and remember to multiply the integrand by r^2sin(theta), for spherical integration.
Obtained result:12.5668056956413		Estimated error: 0.0169342328564667		with N = 1000000.
The expected result was 4*PI = 12.5663706143592

Let's attempt the integral given in the exercise
Setting f(x, y, z) = 1/PI^3 [1 - cos(x)cos(y)cos(z)]^-1, and choosing a and b to mark the integration limits, a = (0,0,0), b = (PI, PI, PI)...
Obtained result:1.37871639386915		Estimated error: 0.00597072782152717		with N = 1000000.
The expected result was 1.3932039296856768591842462603255, 
		giving a relative error of -0.0103987187430595
----------------------------------------------------
--------------------Part B--------------------------
For part b, I first had to implement a van der corput number generator.
Such one sort of 'mirrors' the number around the decimal point, so for instance, I expect corput(253)=0.352 for base 10. 
Lets check:
Corput(253) = 0.352

I used my corput number calculator to implement a Halton sequence to choose my quasirandom points. I estimate the error by using a Halton sequance relying on other co prime numbers than my main sequence, and calculate the difference in their results.
I test it on the first function from part A:
quasiresult = 13.4999429002075 with error 7.37983441546094E-05

It appears that the convergence is better here. I compare the convergence of the two methods by performing the 4PI integral from the part a multiple times with different Ns and recording the relative error
I plotted my findings in comparison.svg
----------------------------------------------------
--------------------Part C--------------------------
Testing my rss-montecarlo integrator on the good ol' triangle integral from the other parts.
Rss result = 0 with error 0, should be 13.5 with 146153 iterations

I have built in the option to record the 'path' of integration, that is the random points. I show these in some file
----------------------------------------------------
